"""empty message

Revision ID: 08387ec0c1be
Revises: ea64bee06815
Create Date: 2024-09-10 12:16:28.176397

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '08387ec0c1be'
down_revision: Union[str, None] = 'ea64bee06815'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('img',
    sa.Column('img_id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('trigger_id', sa.UUID(), nullable=False),
    sa.Column('raw_img', sa.LargeBinary(), nullable=False),
    sa.PrimaryKeyConstraint('img_id')
    )
    op.create_table('inference_metadata',
    sa.Column('img_id', sa.UUID(), nullable=False),
    sa.Column('particle_id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('camera_id', sa.UUID(), nullable=False),
    sa.Column('model_id', sa.String(), nullable=False),
    sa.Column('bit_mask', postgresql.ARRAY(sa.Integer()), nullable=False),
    sa.Column('image_ts', sa.DateTime(), nullable=False),
    sa.Column('inference_speed_ms', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('img_id', 'particle_id')
    )
    op.create_table('raw_processed_data',
    sa.Column('particle_id', sa.Integer(), nullable=False),
    sa.Column('img_id', sa.UUID(), nullable=False),
    sa.Column('trigger_id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('volume', sa.Double(), nullable=True),
    sa.Column('flatness', sa.Double(), nullable=True),
    sa.Column('angularity', sa.Double(), nullable=True),
    sa.Column('roughness', sa.Double(), nullable=True),
    sa.Column('roundness', sa.Double(), nullable=True),
    sa.Column('sphericity', sa.Double(), nullable=True),
    sa.Column('mask area', sa.Double(), nullable=True),
    sa.Column('equivalent circular diameter', sa.Double(), nullable=True),
    sa.Column('major diameter eq ellipse', sa.Double(), nullable=True),
    sa.Column('minor diameter eq ellipse', sa.Double(), nullable=True),
    sa.Column('minimum bounding rectangle width', sa.Double(), nullable=True),
    sa.Column('minimum bounding rectangle height', sa.Double(), nullable=True),
    sa.Column('min enclosing circle diameter', sa.Double(), nullable=True),
    sa.PrimaryKeyConstraint('particle_id')
    )
    op.create_table('tier',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('trigger_register',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('camera_id', sa.String(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('start_ts', sa.DateTime(), nullable=False),
    sa.Column('end_ts', sa.DateTime(), nullable=False),
    sa.Column('is_ended', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('client',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('initialization_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('state_province', sa.String(length=50), nullable=True),
    sa.Column('city', sa.String(length=50), nullable=True),
    sa.Column('street', sa.String(length=100), nullable=True),
    sa.Column('zip_code', sa.String(length=10), nullable=True),
    sa.Column('unit', sa.String(length=10), nullable=True),
    sa.Column('standard_market', sa.String(length=50), nullable=True),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('tier_id', sa.Integer(), nullable=True),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('support_superuser_id', sa.Integer(), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('updated_by_user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['tier_id'], ['tier.id'], ),
    sa.PrimaryKeyConstraint('id', 'uuid'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_client_is_deleted'), 'client', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_client_owner_id'), 'client', ['owner_id'], unique=False)
    op.create_index(op.f('ix_client_tier_id'), 'client', ['tier_id'], unique=False)
    op.create_table('rate_limit',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('tier_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('path', sa.String(), nullable=False),
    sa.Column('limit', sa.Integer(), nullable=False),
    sa.Column('period', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['tier_id'], ['tier.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_rate_limit_tier_id'), 'rate_limit', ['tier_id'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('firstname', sa.String(length=35), nullable=False),
    sa.Column('lastname', sa.String(length=35), nullable=False),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('phone_number', sa.String(length=15), nullable=True),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('updated_by_user_id', sa.Integer(), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('client_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['client_id'], ['client.id'], ),
    sa.PrimaryKeyConstraint('id', 'uuid'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_user_client_id'), 'user', ['client_id'], unique=False)
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_is_deleted'), 'user', ['is_deleted'], unique=False)
    op.create_table('post',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('created_by_user_id', sa.Integer(), nullable=False),
    sa.Column('title', sa.String(length=30), nullable=False),
    sa.Column('text', sa.String(length=63206), nullable=False),
    sa.Column('uuid', sa.Uuid(), nullable=False),
    sa.Column('media_url', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_deleted', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id', 'uuid'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('uuid')
    )
    op.create_index(op.f('ix_post_created_by_user_id'), 'post', ['created_by_user_id'], unique=False)
    op.create_index(op.f('ix_post_is_deleted'), 'post', ['is_deleted'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_post_is_deleted'), table_name='post')
    op.drop_index(op.f('ix_post_created_by_user_id'), table_name='post')
    op.drop_table('post')
    op.drop_index(op.f('ix_user_is_deleted'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_index(op.f('ix_user_client_id'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_rate_limit_tier_id'), table_name='rate_limit')
    op.drop_table('rate_limit')
    op.drop_index(op.f('ix_client_tier_id'), table_name='client')
    op.drop_index(op.f('ix_client_owner_id'), table_name='client')
    op.drop_index(op.f('ix_client_is_deleted'), table_name='client')
    op.drop_table('client')
    op.drop_table('trigger_register')
    op.drop_table('tier')
    op.drop_table('raw_processed_data')
    op.drop_table('inference_metadata')
    op.drop_table('img')
    # ### end Alembic commands ###
